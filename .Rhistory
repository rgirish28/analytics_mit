NewsTrain = read.csv("NYTimesBlogTrain.csv")
simple = NewsTrain[c("NewsDesk", "SectionName", "SubsectionName")]
library(mice)
set.seed(144)
imputed = complete(mice(simple))
NewsTrain = read.csv("NYTimesBlogTrain.csv", na.strings = "")
simple = NewsTrain[c("NewsDesk", "SectionName", "SubsectionName")]
set.seed(144)
imputed = complete(mice(simple))
summary(NewsTrain)
summary(aimplw)
summary(simple)
summary(imputed)
NewsTrain$NewsDesk = imputed$NewsDesk
NewsTrain$SectionName = imputed$SectionName
NewsTrain$SubsectionName = imputed$SubsectionName
impleModel = glm(Popular ~ NewsDesk + SectionName + SubsectionName, data = NewsTrain, family = binomial)
NewsTest = read.csv("NYTimesBlogTest.csv")
predictions = predict(impleModel, newdata = NewsTest, type = "response")
summary(NewsTest)
NewsTest = read.csv("NYTimesBlogTest.csv", na.strings = "")
summary(NewsTest)
predictions = predict(impleModel, newdata = NewsTest, type = "response")
summary(predictions)
simpleT = NewsTest[c("NewsDesk", "SectionName", "SubsectionName")]
set.seed(144)
imputedT = complete(mice(simple))
NewsTest$NewsDesk = imputedT$NewsDesk
imputedT = complete(mice(simpleT))
NewsTest$NewsDesk = imputedT$NewsDesk
NewsTest$SectionName = imputedT$SectionName
NewsTest$SubsectionName = imputedT$SubsectionName
predictions = predict(impleModel, newdata = NewsTest, type = "response")
summary(predictions)
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = PredTest)
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = predictions)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
NewsTrain$PubDate = strptime(NewsTrain$PubDate, "%Y-%m-%d %H:%M:%S")
NewsTest$PubDate = strptime(NewsTest$PubDate, "%Y-%m-%d %H:%M:%S")
NewsTrain$Weekday = NewsTrain$PubDate$wday
NewsTest$Weekday = NewsTest$PubDate$wday
NewsTrain$Time = NewsTrain$PubDate$hour
summary(NewsTrain)
impleModel = glm(Popular ~ NewsDesk + SectionName + SubsectionName+ Weekday + Time, data = NewsTrain, family = binomial)
predictions = predict(impleModel, newdata = NewsTest, type = "response")
summary(predictions)
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = predictions)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
impleModel = glm(Popular ~ NewsDesk + SectionName + SubsectionName+ Weekday + Time+ WordCount, data = NewsTrain, family = binomial)
predictions = predict(impleModel, newdata = NewsTest, type = "response")
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = predictions)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
library(tm)
NewsTr =  read.csv("NYTimesBlogTrain.csv", stringsAsFactors=FALSE)
NewsTe =  read.csv("NYTimesBlogTest.csv", stringsAsFactors=FALSE)
CorpusHeadline = Corpus(VectorSource(c(NewsTr$Headline, NewsTe$Headline)))
CorpusHeadline = tm_map(CorpusHeadline, tolower)
CorpusHeadline = tm_map(CorpusHeadline, PlainTextDocument)
CorpusHeadline = tm_map(CorpusHeadline, removePunctuation)
CorpusHeadline = tm_map(CorpusHeadline, removeWords, stopwords("english"))
CorpusHeadline = tm_map(CorpusHeadline, stemDocument)
dtm = DocumentTermMatrix(CorpusHeadline)
summary(dtm)
str(dtm)
sparse = removeSparseTerms(dtm, 0.99)
HeadlineWords = as.data.frame(as.matrix(sparse))
str(HeadlineWords)
colnames(HeadlineWords) = make.names(colnames(HeadlineWords))
str(HeadlineWords)
HeadlineWordsTrain = head(HeadlineWords, nrow(NewsTr))
HeadlineWordsTest = tail(HeadlineWords, nrow(NewsTe))
HeadlineWordsTrain$Popular = NewsTr$Popular
HeadlineWordsTrain$WordCount = NewsTrain$WordCount
HeadlineWordsTest$WordCount = NewsTest$WordCount
HeadlineWordsTest$Weekday = NewsTest$Weekday
HeadlineWordsTrain$Weekday = NewsTrain$Weekday
HeadlineWordsTrain$Time = NewsTrain$Time
HeadlineWordsTrain$SubsectionName = NewsTrain$SubsectionName
HeadlineWordsTest$Time = NewsTest$Time
HeadlineWordsTest$SubsectionName = NewsTest$SubsectionName
HeadlineWordsTest$SectionName = NewsTest$SectionName
HeadlineWordsTrain$SectionName = NewsTrain$SectionName
HeadlineWordsTrain$NewsDesk = NewsTrain$NewsDesk
HeadlineWordsTest$NewsDesk = NewsTest$NewsDesk
model = glm(Popular ~ ., data = HeadlineWordsTrain, family = binomial)
summary(model)
model = glm(Popular ~ . - SubsectionName, data = HeadlineWordsTrain, family = binomial)
summary(model)
predictions = predict(model, newdata = HeadlineWordsTest, type = "response")
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = predictions)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
summary(predictions)
summary(model)
library(rpart)
library(rpart.plot)
CARTtree = rpart(Popular ~ ., data = HeadlineWordsTrain)
prp(CARTtree)
library(caret)
library(e1071)
tr.control = trainControl(method = "cv", number = 10)
cp.grid = expand.grid( .cp = (0:10)*0.001)
tr = train(Popular ~ ., data = HeadlineWordsTrain, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
best.tree = tr$finalModel
prp(best.tree)
best.tree.pred = predict(best.tree, newdata=HeadlineWordsTest)
prp(best.tree)
treePred = predict(CARTtree, newdata=HeadlineWordsTest)
summary(treePred)
prp(CARTtree)
prp(best.tree)
summary(HeadlineWordsTrain)
summary(best.tree)
best.tree.pred = predict(best.tree, newdata=HeadlineWordsTest)
summary(treePred)
str(treePred)
library(randomForests)
library(randomForest)
ranFor = randomForest(Popular ~ ., data = HeadlineWordsTrain)
predictFor = predict( ranFor, newdata = HeadlineWordsTest)
prp(ranFor)
plot(ranFor)
train(Popular ~ ., data = HeadlineWordsTrain, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
CARTtree = rpart(Popular ~ ., data = HeadlineWordsTrain, method = "class", cp = 0.002)
treePred = predict(CARTtree, newdata=HeadlineWordsTest, type = "class")
summary(treePred)
CARTtree = rpart(Popular ~ ., data = HeadlineWordsTrain, cp = 0.002)
treePred = predict(CARTtree, newdata=HeadlineWordsTest)
summary(treePred)
prp(CARTtree)
MySubmission = data.frame(UniqueID = NewsTest$UniqueID, Probability1 = treePred)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
q()
ls
q()
q()
q()
